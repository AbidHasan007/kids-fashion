generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customer  Customer?
  leads     Lead[]

  @@map("users")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String   @default("Bangladesh")
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("customers")
}

model Product {
  id             String           @id @default(cuid())
  title          String
  description    String?
  handle         String           @unique
  price          Float
  compareAtPrice Float?
  images         String[]
  category       String?
  tags           String[]
  inventory      Int              @default(0)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  orderItems     OrderItem[]
  variants       ProductVariant[]

  @@index([isActive, createdAt])
  @@index([category])
  @@map("products")
}

model ProductVariant {
  id         String      @id @default(cuid())
  productId  String
  title      String
  price      Float
  inventory  Int         @default(0)
  sku        String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, title])
  @@map("product_variants")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  customerId      String?
  status          OrderStatus   @default(PENDING)
  total           Float
  subtotal        Float
  shippingCost    Float         @default(0)
  paymentMethod   PaymentMethod @default(CASH_ON_DELIVERY)
  paymentStatus   PaymentStatus @default(PENDING)
  customerName    String
  customerPhone   String
  customerEmail   String
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZipCode String?
  shippingCountry String        @default("Bangladesh")
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderItems      OrderItem[]
  customer        Customer?     @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Float
  createdAt DateTime        @default(now())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Lead {
  id         String     @id @default(cuid())
  name       String
  email      String
  phone      String?
  message    String?
  source     String?
  status     LeadStatus @default(NEW)
  assignedTo String?
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String?
  user       User?      @relation(fields: [userId], references: [id])

  @@map("leads")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  BANK_TRANSFER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}
